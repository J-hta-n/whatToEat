// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Database instance is hosted using AWS RDS (https://youtu.be/I_fTQTsz2nQ?si=mIBexc3O5RkWmYM4)
datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // PrismaAdapter expects this to be unique
  emailVerified DateTime? // Required by Auth.js PrismaAdapter
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Add accounts for proper auth provider support
  accounts      Account[]
  sessions      Session[]
  
  // Relations to user-created content
  foodPlaces    FoodPlace[]
  cuisines      Cuisine[]
  dishes        Dish[]
  locations     Location[]
  tags          Tag[]
  categories    Category[]

  @@index([email]) // Even without unique constraint, you'll query by email
}

// Add these models for Auth.js compatibility
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model FoodPlace {
  id              Int                   @id @default(autoincrement())
  place_name      String                @db.VarChar(100)
  place_type      PlaceType             @default(RESTAURANT)
  tried_before    Boolean               @default(false)
  lb_cost         Int?                  @default(1)
  ub_cost         Int?                  @default(20)
  personal_rating Int?                  @default(0)
  google_rating   Int?                  @default(0)
  region          Region?               @default(ISLANDWIDE)
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  
  // User relationship - NOW OPTIONAL for community resources
  created_by      String?
  user            User?                 @relation(fields: [created_by], references: [id], onDelete: Cascade)
  
  cuisines        FoodPlaceByCuisine[]
  dishes          FoodPlaceByDish[]
  locations       FoodPlaceByLocation[]
  tags            FoodPlaceByTag[]

  @@index([created_by]) // For user's food places queries
  @@index([tried_before]) // For filtering by tried/untried
  @@index([region]) // For regional filtering
  @@index([place_type]) // For filtering by type
}

enum PlaceType {
  RESTAURANT
  HAWKER_STALL
  CANTEEN_STALL
  BAKERY
  DESSERT_PLACE
  OTHERS
}

enum Region {
  NORTH
  EAST
  CENTRAL
  WEST
  ISLANDWIDE
}

// Models for Cuisine, Dishes, Location, Tag, and Categories 
model Cuisine {
  id         Int                  @id @default(autoincrement())
  cuisine    String               @db.VarChar(100)
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  
  // User relationship - NOW OPTIONAL for community resources
  created_by String?
  user       User?                @relation(fields: [created_by], references: [id], onDelete: Cascade)
  
  places     FoodPlaceByCuisine[]

  // Modified unique constraint to handle NULL created_by
  // This allows multiple community cuisines with same name, but prevents user duplicates
  @@unique([created_by, cuisine])
  @@index([created_by])
}

model Dish {
  id         Int               @id @default(autoincrement())
  dish       String            @db.VarChar(100)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  
  // User relationship - NOW OPTIONAL for community resources
  created_by String?
  user       User?             @relation(fields: [created_by], references: [id], onDelete: Cascade)
  
  places     FoodPlaceByDish[]

  // Modified unique constraint to handle NULL created_by
  @@unique([created_by, dish])
  @@index([created_by])
}

model Location {
  id         Int                   @id @default(autoincrement())
  location   String                @db.VarChar(100)
  type       String                @db.VarChar(50)
  region     Region
  address    String                @db.VarChar(255)
  created_at DateTime              @default(now())
  updated_at DateTime              @updatedAt
  
  // User relationship - NOW OPTIONAL for community resources
  created_by String?
  user       User?                 @relation(fields: [created_by], references: [id], onDelete: Cascade)
  
  places     FoodPlaceByLocation[]

  // Modified unique constraint to handle NULL created_by
  @@unique([created_by, location])
  @@index([created_by])
}

model Tag {
  id          Int              @id @default(autoincrement())
  tag         String           @db.VarChar(100)
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  
  // User relationship - NOW OPTIONAL for community resources
  created_by  String?
  user        User?            @relation(fields: [created_by], references: [id], onDelete: Cascade)
  
  category    Category?        @relation(fields: [category_id], references: [id])
  category_id Int?
  places      FoodPlaceByTag[]

  // Modified unique constraint to handle NULL created_by
  @@unique([created_by, tag])
  @@index([created_by])
}

model Category {
  id         Int      @id @default(autoincrement())
  category   String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // User relationship - NOW OPTIONAL for community resources
  created_by String?
  user       User?    @relation(fields: [created_by], references: [id], onDelete: Cascade)
  
  tags       Tag[]

  // Modified unique constraint to handle NULL created_by
  @@unique([created_by, category])
  @@index([created_by])
}

// Junction Tables: FoodPlaceByCuisine, FoodPlaceByDish, FoodPlaceByLocation, and FoodPlaceByTag
model FoodPlaceByCuisine {
  place      FoodPlace @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id   Int
  cuisine    Cuisine   @relation(fields: [cuisine_id], references: [id], onDelete: Cascade)
  cuisine_id Int
  created_at DateTime  @default(now())

  @@id([place_id, cuisine_id])
}

model FoodPlaceByDish {
  place      FoodPlace @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id   Int
  dish       Dish      @relation(fields: [dish_id], references: [id], onDelete: Cascade)
  dish_id    Int
  created_at DateTime  @default(now())

  @@id([place_id, dish_id])
}

model FoodPlaceByLocation {
  place       FoodPlace @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id    Int
  location    Location  @relation(fields: [location_id], references: [id], onDelete: Cascade)
  location_id Int
  created_at  DateTime  @default(now())

  @@id([place_id, location_id])
}

model FoodPlaceByTag {
  place      FoodPlace @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id   Int
  tag        Tag       @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id     Int
  created_at DateTime  @default(now())

  @@id([place_id, tag_id])
}